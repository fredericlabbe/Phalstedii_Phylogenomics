#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu May  4 08:33:45 2023
@author: Frederic Labbe
This script converts SNP coordinates (i.e. chromosomes and positions in a VCF file) from one coordinate system to another.
Note: The VCF should not contain the INFO field (as it can contains "," and thus impacts the script outputs).
usage: python VCFCoordConv.py --vcf /path/to/file.vcf.gz' --table /path/to/table.csv' 
"""

import os.path
import pandas as pd
import gzip
import re
import argparse
import sys
pd.options.mode.chained_assignment = None
parser = argparse.ArgumentParser()
parser.add_argument('-v', "--vcf", required = True, help = 'Path to the vcf file or gzipped vcf file')
parser.add_argument('-t', "--table", required = True, help = 'Path to the csv table of the syntenic path generated by SynMap')
parser.add_argument('-e', "--export", required = False, action = "store_true", help = 'Whether the dictionary of coordinates should be exported as a csv table (optional)')
args = parser.parse_args()

def CoordDict(table, export):
    if os.path.exists(table):
        coord = pd.read_csv(table)
        chroms = coord["Dest_Chromosome"].unique()
        if export:
            df1 = pd.DataFrame()
        my_dict = {}
        for chrom in chroms:
            subset = coord[coord["Dest_Chromosome"] == chrom]
            scaffolds = subset["Src_Scaffold"].unique()
            chrom_start = 0
            chrom_end = 0
            for scaffold in scaffolds:
                scaffold_subset = subset[subset["Src_Scaffold"] == scaffold]
                scaffold_start = scaffold_subset["Start"].values[0]
                scaffold_end = scaffold_subset["End"].values[0]
                scaffold_reverse = scaffold_subset["Reverse"].values[0]
                if scaffold_reverse == 0:
                    chrom_end += scaffold_end
                    if export:
                        df2 = pd.DataFrame({'scaffold': [scaffold], 'scaffold_start': [scaffold_start], 'scaffold_end': [scaffold_end], 'chrom': [chrom], 'chrom_start': [chrom_start], 'chrom_end': [chrom_end]})
                    my_dict[scaffold] = [scaffold_start, scaffold_end, chrom, chrom_start, chrom_end]
                    chrom_start += scaffold_end
                else:
                    chrom_end = chrom_start
                    chrom_start += scaffold_end
                    if export:
                        df2 = pd.DataFrame({'scaffold': [scaffold], 'scaffold_start': [scaffold_start], 'scaffold_end': [scaffold_end], 'chrom': [chrom], 'chrom_start': [chrom_start], 'chrom_end': [chrom_end]})
                    my_dict[scaffold] = [scaffold_start, scaffold_end, chrom, chrom_start, chrom_end]
                    chrom_end += scaffold_end
                if export:
                    df1 = pd.concat([df1, df2])
                chrom_start += 1
                chrom_end += 1
        if export:
            csv = table.split("/")[-1].split(".csv")[0] + "_dict.csv"
            df1.to_csv(csv, sep = '\t', index = False, header = True)
        return my_dict
    else:
        sys.exit('Error: provide a valid path to the csv table with coordinates')

def VCFCoordConv(vcf, table, export):
    if os.path.exists(vcf):
        my_dict = CoordDict(table, export)        
        if vcf[-2:] == "gz":
            outputfile = vcf.split("/")[-1].split(".vcf.gz")[0] + ".coord.vcf"
        elif vcf[-2:] == "cf":
            outputfile = vcf.split("/")[-1].split(".vcf")[0] + ".coord.vcf" 
        else:
            sys.exit('Error: the vcf file should have the following extensions: "vcf" or "vcf.gz"')
        if vcf[-2:] == "gz":
            with gzip.open(vcf, "rt") as ifile:
                WriteVCF(ifile, my_dict, outputfile)
        else:
            with open(vcf, "rt") as ifile:
                WriteVCF(ifile, my_dict, outputfile)
    else:
        sys.exit('Error: provide a valid path to the compressed vcf file')

def WriteVCF(ifile, my_dict, outputfile):
    f = open(outputfile, 'w')
    for line in ifile:
      if not line.startswith("#"):
          line = line.split('\t')
          scaffold_position = int(line[1])
          info = my_dict[line[0]]
          scaffold_positions = list(range(info[0], info[1] + 1))
          if info[3] < info[4]:
              chrom_positions = list(range(info[3], info[4] + 1))
          else:
              chrom_positions = list(range(info[4], info[3] + 1))
              chrom_positions.reverse()
          df3 = pd.DataFrame({'scaffold_positions': scaffold_positions, 'chrom_positions': chrom_positions})
          df3 = df3[df3["scaffold_positions"] == scaffold_position]
          new_pos = df3["chrom_positions"].values[0]
          line[0] = info[2]
          line[1] = new_pos
          line = re.sub(', ', '\t', str(line))
          line = re.sub('\'', '', line)
          line = re.sub('\[', '', line)
          line = re.sub('\]', '', line)          
          line = line.replace("\\n", "\n")          
          f.write(re.sub(',', '\t', str(line)))
      else:
          f.write(line)              
    f.close()    
    
if __name__ == '__main__':
     VCFCoordConv(args.vcf, args.table, args.export)
