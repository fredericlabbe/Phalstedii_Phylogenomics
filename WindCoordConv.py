#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu May  4 08:33:45 2023
@author: Frederic Labbe
This script converts the genomic window coordinates (i.e. chromosomes and positions in a csv file) from one coordinate system to another.
usage: python WindCoordConv.py --table /path/to/table.csv' --dictionary /path/to/dictionary.csv' --size 100000
"""

import os.path
import pandas as pd
import re
import argparse
import sys
pd.options.mode.chained_assignment = None
parser = argparse.ArgumentParser()
parser.add_argument('-d', "--dictionary", required = True, help = 'Path to the dictionary of coordinates as a csv table (generated by VCFCoordConv.py)')
parser.add_argument('-t', "--table", required = True, help = 'Path to the csv table with coordinates to convert')
parser.add_argument('-s', "--size", type = int, required = True, help = 'Window size')
args = parser.parse_args()

def WindCoordConv(table, dictionary, size):
    if os.path.exists(dictionary):
        conv = pd.read_csv(dictionary, sep = "\t")
        if os.path.exists(table):
            outputfile = table.split("/")[-1].split(".csv")[0] + ".converted.csv"
            f = open(outputfile, 'w')
            with open(table, "rt") as ifile:
                for line in ifile:
                    if not line.startswith("scaffold"):  
                        line = line.split(',')
                        wind_chrom = line[0]
                        conv_subset = conv[conv["chrom"] == wind_chrom]
                        wind_start = line[1]
                        wind_end = line[2]
                        
                        # Check chromosome size
                        for index, row in conv_subset.iterrows():
                            if row["chrom_start"] < row["chrom_end"]:
                                chrom_size = row["chrom_end"]
                            else:
                                chrom_size = row["chrom_start"]
                    
                        # Identify starting coordinates
                        l = 0
                        while l == 0:
                            for index, row in conv_subset.iterrows():
                                chrom_start = row["chrom_start"]
                                chrom_end = row["chrom_end"]
                                if chrom_start > chrom_end:
                                    if int(wind_start) >= chrom_end and int(wind_start) <= chrom_start:
                                        wind_start_scaffold = row["scaffold"]
                                        wind_start_scaffold_inv = "true"
                                        wind_start_scaffold_start = row["scaffold_start"]
                                        wind_start_scaffold_end = row["scaffold_end"]
                                        wind_start_chrom_start = row["chrom_start"]
                                        wind_start_chrom_end = row["chrom_end"]
                                        l += 1
                                else:
                                    if int(wind_start) <= chrom_end and int(wind_start) >= chrom_start:
                                        wind_start_scaffold = row["scaffold"]
                                        wind_start_scaffold_inv = "false"
                                        wind_start_scaffold_start = row["scaffold_start"]
                                        wind_start_scaffold_end = row["scaffold_end"]
                                        wind_start_chrom_start = row["chrom_start"]
                                        wind_start_chrom_end = row["chrom_end"]
                                        l += 1                            
                       
                        # Identify ending coordinates
                        l = 0
                        while l == 0:
                            for index, row in conv_subset.iterrows():
                                chrom_start = row["chrom_start"]
                                chrom_end = row["chrom_end"]
                                if int(wind_end) > chrom_size:
                                    wind_end = chrom_size
                                if chrom_start > chrom_end:
                                    if int(wind_end) >= chrom_end and int(wind_end) <= chrom_start:
                                        wind_end_scaffold = row["scaffold"]
                                        wind_end_scaffold_inv = "true"
                                        wind_end_scaffold_start = row["scaffold_start"]
                                        wind_end_scaffold_end = row["scaffold_end"]
                                        wind_end_chrom_start = row["chrom_start"]
                                        wind_end_chrom_end = row["chrom_end"]
                                        l += 1
                                else:
                                    if int(wind_end) <= chrom_end and int(wind_end) >= chrom_start:
                                        wind_end_scaffold = row["scaffold"]
                                        wind_end_scaffold_inv = "false"
                                        wind_end_scaffold_start = row["scaffold_start"]
                                        wind_end_scaffold_end = row["scaffold_end"]
                                        wind_end_chrom_start = row["chrom_start"]
                                        wind_end_chrom_end = row["chrom_end"]
                                        l += 1
                               
                        # Convert and export
                        if wind_start_scaffold == wind_end_scaffold:
                            # If window starts and finishes on a single scaffold
                            if wind_start_scaffold_inv == "true":
                                line[0] = wind_start_scaffold
                                line[1] = wind_end_scaffold_end - (int(wind_end) - 1 - wind_start_chrom_end)
                                line[2] = wind_end_scaffold_end - (int(wind_start) - 1 - wind_start_chrom_end)
                                Write(line, f)
                            else:
                                line[0] = wind_start_scaffold
                                line[1] = wind_start_scaffold_start + int(wind_start) - 1 - wind_start_chrom_start
                                line[2] = wind_start_scaffold_start + int(wind_end) - 1 - wind_start_chrom_start
                                Write(line, f)
                        else:
                            # Otherwise, i.e. if window starts and finishes on different scaffolds
                            line1 = line
                            line2 = line
                            # If window starts and finishes in inverted scaffolds
                            if wind_start_scaffold_inv == "true" and wind_end_scaffold_inv == "true":
                                line1[0] = wind_start_scaffold
                                line1[1] = wind_start_scaffold_start
                                line1[2] = wind_start_scaffold_start + wind_start_chrom_start - int(wind_start)
                                dif = size - (wind_start_scaffold_start + wind_start_chrom_start - int(wind_start))
                                Write(line1, f)
                                line2[0] = wind_end_scaffold
                                line2[1] = wind_end_scaffold_end - dif + 1
                                line2[2] = wind_end_scaffold_end
                                Write(line2, f)
                            # If window starts in an inverted scaffold but finishes in a normal one
                            elif wind_start_scaffold_inv == "true" and wind_end_scaffold_inv == "false":
                                print("done")
                                line1[0] = wind_start_scaffold
                                line1[1] = wind_start_scaffold_start
                                line1[2] = wind_start_scaffold_start + wind_start_chrom_start - int(wind_start)
                                dif = size - (wind_start_scaffold_start + wind_start_chrom_start - int(wind_start))
                                Write(line1, f)
                                line2[0] = wind_end_scaffold
                                line2[1] = wind_end_scaffold_start
                                line2[2] = wind_end_scaffold_start + dif - 1
                                Write(line2, f)
                            # If window starts and finishes in normal scaffolds
                            elif wind_start_scaffold_inv == "false" and wind_end_scaffold_inv == "false":
                                line1[0] = wind_start_scaffold
                                line1[1] = wind_start_scaffold_start + int(wind_start) - 1 - wind_start_chrom_start
                                line1[2] = wind_start_scaffold_end
                                dif = size - (wind_start_scaffold_end - (wind_start_scaffold_start - wind_start_chrom_start + int(wind_start) - 1))
                                Write(line1, f)
                                line2[0] = wind_end_scaffold
                                line2[1] = wind_end_scaffold_start
                                line2[2] = wind_end_scaffold_start + dif - 1
                                Write(line2, f)
                            # If window starts in normal scaffold but finishes in an inverted one
                            elif wind_start_scaffold_inv == "false" and wind_end_scaffold_inv == "true":
                                line1[0] = wind_start_scaffold
                                line1[1] = wind_start_scaffold_start + int(wind_start) - 1 - wind_start_chrom_start
                                line1[2] = wind_start_scaffold_end
                                dif = size - (wind_start_scaffold_end - (wind_start_scaffold_start - wind_start_chrom_start + int(wind_start) - 1))
                                Write(line1, f)
                                print("done")
                                line2[0] = wind_end_scaffold
                                line2[1] = wind_end_scaffold_end - dif - 1
                                line2[2] = wind_end_scaffold_end
                                Write(line2, f)
                    else:
                        f.write(line)
            f.close()
        else:
            sys.exit('Error: provide a valid path to the csv table with coordinates to convert')
    else:
        sys.exit('Error: provide a valid path to the dictionary of coordinates as a csv table')

def Write(line, f):
    line = re.sub('\'', '', str(line))
    line = re.sub('\[', '', line)
    line = re.sub('\]', '', line)    
    line = re.sub(' ', '', line)
    line = line.replace("\\n", "\n")
    f.write(str(line))

if __name__ == '__main__':
     WindCoordConv(args.table, args.dictionary, args.size)
